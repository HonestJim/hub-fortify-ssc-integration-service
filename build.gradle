buildscript {
	ext {
		springBootVersion = '1.5.3.RELEASE'
	}
	repositories {
		mavenCentral()
		maven{url "https://plugins.gradle.org/m2/"}
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
 		classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.0.0"
	}
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '1.5.3.RELEASE'
    id 'application'
    id 'jacoco'
    id 'com.github.kt3k.coveralls' version '2.8.1'
}
allprojects{ 
	apply plugin: 'maven-publish' 
	apply plugin: "com.jfrog.artifactory"
}

sourceCompatibility = 1.8

targetCompatibility = 1.8

group 'com.blackducksoftware.integration.fortify'
version = '2.0.2'

mainClassName = 'com.blackducksoftware.integration.fortify.Application'

applicationDefaultJvmArgs = ["-Dspring.config.location=../config/"]

startScripts {
    doLast {
        windowsScript.text = windowsScript.text.replace("%CMD_LINE_ARGS%", "--spring.config.location=../config/")
    }
}

ext {
	springVersion = '4.3.5.RELEASE'
	retrofit2Version = '2.1.0'
	okhttp3Version = '3.3.1'
	powerMockitoVersion = '1.6.6'
	uploadDefs = new File("${rootDir}/uploadArtifacts.gradle")
	
        buildName = 'hub-fortify-ssc-integration-service'
        buildNumber = System.getenv()['BUILD_NUMBER'] ?: "developer-${System.currentTimeMillis()}"
}

repositories {
	mavenCentral()
}

dependencies {
	compile("org.springframework.boot:spring-boot-starter")
	compile("org.springframework.boot:spring-boot-starter-batch")
	compile("org.springframework:spring-beans")
	compile("org.springframework:spring-context")
	compile("org.springframework:spring-context-support")
	compile("org.springframework:spring-core")
	compile("org.springframework:spring-expression")
	compile("com.blackducksoftware.integration:hub-common:[1,)")
	compile("javax.servlet:javax.servlet-api")
	compile("com.squareup.retrofit2:retrofit:2.1.0")
	compile("com.fasterxml.jackson.core:jackson-annotations:2.8.8")
	compile("com.squareup.retrofit2:converter-gson:2.1.0")
	compile("com.google.code.gson:gson")
	compile("com.squareup.okhttp3:okhttp:3.3.1")
	compile("com.squareup.okhttp3:logging-interceptor:3.3.1")
	compile("com.squareup.okhttp3:okhttp-urlconnection:3.3.1")
	compile("com.squareup.retrofit2:converter-simplexml:2.1.0")
	compile("com.fasterxml.jackson.dataformat:jackson-dataformat-csv")
	testCompile("org.powermock:powermock-api-mockito:1.6.6")
	testCompile("org.powermock:powermock-module-junit4:1.6.6")
	testCompile("junit:junit:4.+")
    testCompile("org.springframework.boot:spring-boot-starter-test")
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.1'
}

jar {
	manifest {
        attributes( 'Main-Class': 'com.blackducksoftware.integration.fortify.Application',
        'Class-Path': configurations.compile.collect { it.getName() }.join(' '))
    }
    
    sourceSets {
        main {
            resources {
                exclude 'mapping.json'
                exclude 'batch_job_status.txt'
            }
        }
    }
}

distributions {
    main {
        contents {
            from('src/main/resources/application_prod.properties') {
            	into 'config/'
            	rename {'application.properties'}
            }
            from('src/main/resources/attributes_prod.properties') {
            	into 'config/'
            	rename {'attributes.properties'}
            }
            from('src/main/resources/mapping_prod.json') {
            	into 'config/'
            	rename {'mapping.json'}
            }
            from('src/main/resources/batch_job_status.txt') {into 'config/'}
            from('src/main/resources/hub-fortify.log') {into 'log/'}
            from('sample.csv') { into 'report/'}
        }
    }
}

publishing{
        publications{
                maven(MavenPublication){
                        from components.java
                        artifact distZip
			artifact distTar 
                }
        }
}

if (uploadDefs.exists()){
        apply from: uploadDefs

        artifactory{
                clientConfig.setIncludeEnvVars(true)
                clientConfig.info.setBuildName(buildName)
                clientConfig.info.setBuildNumber("${version}-${buildNumber}")
        }
}

jacocoTestReport {
    reports { xml.enabled = true }
}
